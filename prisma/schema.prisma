// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  vehicles Vehicle[]

  @@map("users")
}

model Account {
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Vehicle {
  id               String  @id @default(cuid())
  ownerId          String  @map("owner_id")
  owner            User    @relation(fields: [ownerId], references: [id])
  vin              String  @db.VarChar(255)
  nickname         String? @db.VarChar(255)
  year             Int
  make             String  @db.VarChar(255)
  model            String  @db.VarChar(255)
  trim             String? @db.VarChar(255)
  mfrBodyCode      String? @map("mfr_body_code") @db.VarChar(255)
  engineCode       String? @map("engine_code") @db.VarChar(255)
  transmissionCode String? @map("transmission_code") @db.VarChar(255)
  modelNumber      String? @map("model_number") @db.VarChar(255)
  colorCode        String? @map("color_code") @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  maintenanceLogs     MaintenanceLog[]
  parts               VehiclePart[]
  vehicleServiceTypes VehicleServiceType[]

  @@unique([vin, ownerId])
  @@map("vehicles")
}

model VehiclePart {
  id                     String  @id @default(cuid())
  vehicleId              String  @map("vehicle_id")
  vehicle                Vehicle @relation(fields: [vehicleId], references: [id])
  name                   String  @db.VarChar(255)
  description            String? @db.Text
  productLink            String? @map("product_link") @db.VarChar(255)
  partNumber             String? @map("part_number") @db.VarChar(255)
  manufacturer           String? @db.VarChar(255)
  manufacturerPartNumber String? @map("manufacturer_part_number") @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  maintenanceLogVehicleParts MaintenanceLogVehiclePart[]

  @@map("vehicle_parts")
}

model VehicleServiceType {
  id             String  @id @default(cuid())
  vehicleId      String  @map("vehicle_id")
  vehicle        Vehicle @relation(fields: [vehicleId], references: [id])
  name           String  @db.VarChar(255)
  description    String? @db.Text
  repeat_mileage Int?    @map("repeat_mileage")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  maintenanceLogs MaintenanceLog[]

  @@map("vehicle_service_types")
}

model MaintenanceLog {
  id                   String             @id @default(cuid())
  vehicleId            String             @map("vehicle_id")
  vehicle              Vehicle            @relation(fields: [vehicleId], references: [id])
  vehicleServiceTypeId String             @map("vehicle_service_type_id")
  vehicleServiceType   VehicleServiceType @relation(fields: [vehicleServiceTypeId], references: [id])
  date                 DateTime
  mileage              Int
  description          String             @db.Text
  notes                String?            @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  maintenanceLogVehicleParts MaintenanceLogVehiclePart[]

  @@map("maintenance_logs")
}

model MaintenanceLogVehiclePart {
  maintenanceLogId String         @map("maintenance_log_id")
  maintenanceLog   MaintenanceLog @relation(fields: [maintenanceLogId], references: [id])
  vehiclePartId    String         @map("vehicle_part_id")
  vehiclePart      VehiclePart    @relation(fields: [vehiclePartId], references: [id])
  cost             Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([maintenanceLogId, vehiclePartId])
  @@map("maintenance_log_vehicle_parts")
}
